name: Package Lambda functions

on: 
  workflow_call:
    inputs:
      runs-on-runner:
        description: "Runner where the pipeline will be executed"
        required: false
        type: string
        default: ubuntu-latest
      jdk-version:
        description: "JDK Version"
        required: false
        type: string
        default: "17"
      jobs-timeout-minutes:
        description: "The maximum number of minutes to let a job run before GitHub automatically cancels it"
        required: false
        type: number
        default: 60
      working-directory:
        description: "Directory where the functions are located"
        required: false
        type: string
        default: functions
      function:
        description: "Working directory"
        required: true
        type: string

    secrets:
      VAULT_ADDR:
        description: "Vault address"
        required: true
      VAULT_NAMESPACE:
        description: "Vault namespace"
        required: true
      VAULT_ROLE_ID:
        description: "Vault role id"
        required: true
      VAULT_ROLE_SECRET:
        description: "Vault secret id"
        required: true

jobs:
  package:
    name: Package function
    timeout-minutes: ${{ inputs.jobs-timeout-minutes }}
    runs-on: ${{ inputs.runs-on-runner }}
    environment:
      name: ${{ inputs.use-environment }}
    permissions:
      id-token: write
      contents: read
  
    steps:
      - name: "Vault Secrets"
        run: echo "GIT_HUB_API_TOKEN=${{ secrets.GIT_HUB_API_TOKEN }}" >> $GITHUB_ENV
      
      - name: "Install tools"
        shell: bash
        run: |
          pip install --no-cache-dir --upgrade --quiet jq yq

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up working directory
        run: |
          WORK_DIR="${{ inputs.working-directory }}/${{ inputs.function }}"
          echo "WORK_DIR=${WORK_DIR}" >> $GITHUB_ENV
      
      - name: Version
        run: |
          cd $WORK_DIR

          if [ ! -f pom.xml ]; then
              echo "File not found!"
              exit 1
          fi

          VERSION=$([[ -f "pom.xml" ]] && xq -r -e '.project.version // empty' pom.xml | sed s/"-SNAPSHOT"// || echo "")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      
          RELEASE=$(echo ${{ github.ref }} | cut -d'/' -f3)
          echo "RELEASE=${RELEASE}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: adopt

      - name: "Maven Setup"
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.5

      - name: "Maven Home Setup"
        run: |
          echo "M2_HOME=/opt/hostedtoolcache/maven/3.8.5/x64" >> $GITHUB_ENV
          echo "MAVEN_OPTS=-XshowSettings:vm -XX:+UseContainerSupport -XX:MaxRAMPercentage=90 -Dnetworkaddress.cache.ttl=1 -Djava.security.egd=file:/dev/./urandom" >> $GITHUB_ENV

      - name: "Maven Cache of ~/.m2/repository"
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-maven
          path: ~/.m2/repository

      - name: Build with Maven
        working-directory: ${{ env.WORK_DIR }}
        run: |
          mvn package
          mv target/${{ inputs.function }}-${{ env.VERSION }}.jar target/${{ inputs.function }}-${{ env.RELEASE }}.jar

      - name: "GitHub CLI Setup"
        uses: sersoft-gmbh/setup-gh-cli-action@v2
        with:
          version: stable
          github-token: ${{ secrets.GITHUB_TOKEN}}
      
      - name: Upload release access
        working-directory: ${{ env.WORK_DIR }}
        env:
          GH_TOKEN: ${{ env.GIT_HUB_API_TOKEN }}
        run: |
          gh release upload ${{ env.RELEASE }} target/${{ inputs.function }}-${{ env.RELEASE }}.jar 

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.function }}
          path: |
            ${{ env.WORK_DIR }}/target/${{ inputs.function }}-${{ env.RELEASE }}.jar

