name: Release

on:
  push:
  release:
    types: [created]

    secrets:
      VAULT_ADDR:
        description: "Vault address"
        required: true
      VAULT_NAMESPACE:
        description: "Vault namespace"
        required: true
      VAULT_ROLE_ID:
        description: "Vault role id"
        required: true
      VAULT_ROLE_SECRET:
        description: "Vault secret id"
        required: true
    
env:
  JDK_VERSION: 17
  FUNCTIONS_DIR: functions

jobs:
  working-directories:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Detect working directories
    outputs:
      working-dir: ${{ steps.detect.outputs.working_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect functions directories
        id: detect
        run: |
          working_dir=$(find $FUNCTIONS_DIR -maxdepth 1 -mindepth 1 -type d -print | cut -d'/' -f2 | jq -R . | jq -s . )
          echo working_dir=$working_dir >> $GITHUB_OUTPUT

  package:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: prepare
    strategy:
      matrix:
        working-directory: ${{ fromJSON(needs.working-directories.outputs.working-dir) }}
      max-parallel: 1
  
    steps:
      - name: "Vault Secrets"
        run: echo "GIT_HUB_API_TOKEN=${{ secrets.GIT_HUB_API_TOKEN }}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: "Install tools"
        shell: bash
        run: |
          pip install --no-cache-dir --upgrade --quiet jq yq

      - name: Set up working directory
        run: |
          WORK_DIR="${{ env.FUNCTIONS_DIR }}/${{ matrix.working-directory }}"
          echo "WORK_DIR=${WORK_DIR}" >> $GITHUB_ENV
      
      - name: Version
        run: |
          cd $WORK_DIR

          if [ ! -f pom.xml ]; then
              echo "File not found!"
              exit 1
          fi

          VERSION=$([[ -f "pom.xml" ]] && xq -r -e '.project.version // empty' pom.xml | sed s/"-SNAPSHOT"// || echo "")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: adopt

      - name: "Maven Setup"
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.5

      - name: "Maven Home Setup"
        run: |
          echo "M2_HOME=/opt/hostedtoolcache/maven/3.8.5/x64" >> $GITHUB_ENV
          echo "MAVEN_OPTS=-XshowSettings:vm -XX:+UseContainerSupport -XX:MaxRAMPercentage=90 -Dnetworkaddress.cache.ttl=1 -Djava.security.egd=file:/dev/./urandom" >> $GITHUB_ENV

      - name: "Maven Cache of ~/.m2/repository"
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-maven
          path: ~/.m2/repository

      - name: Build with Maven
        working-directory: ${{ env.WORK_DIR }}
        run: mvn package

      - name: "GitHub CLI Setup"
        uses: sersoft-gmbh/setup-gh-cli-action@v2
        with:
          version: stable
          github-token: ${{ secrets.GITHUB_TOKEN}}
      
      - name: Release tag
        run: |
          RELEASE=$(echo ${{ github.ref }} | cut -d'/' -f3)
          echo "RELEASE=${RELEASE}" >> $GITHUB_ENV

      - name: Upload release access
        working-directory: ${{ env.WORK_DIR }}
        env:
          GH_TOKEN: ${{ env.GIT_HUB_API_TOKEN }}
        run: |
          gh release upload ${{ env.RELEASE }} target/${{ matrix.working-directory }}-${{ env.VERSION }}.jar 

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.working-directory }}
          path: |
            ${{ env.WORK_DIR }}/target/${{ matrix.working-directory }}-${{ env.VERSION }}.jar
